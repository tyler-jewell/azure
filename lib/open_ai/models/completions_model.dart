/// Represents a request to the OpenAI Completions API.
library;
// ignore_for_file: avoid_print

/// Represents a request to the OpenAI Completions API.
class CompletionsRequest {
  /// Creates a new `CompletionsRequest` instance.
  CompletionsRequest({
    required this.deploymentId,
    required this.prompt,
    this.maxTokens,
    this.temperature,
    this.topP,
  });

  /// The deployment ID to use for this request.
  final String deploymentId;

  /// The prompt to use for this request.
  final String prompt;

  /// The maximum number of tokens to generate.
  final int? maxTokens;

  /// Sampling temperature to use. Higher values means the model will
  /// take more risks.
  final double? temperature;

  /// An alternative to sampling with temperature, called nucleus sampling.
  final double? topP;

  /// Converts the request to a JSON map.
  Map<String, dynamic> toJson() => {
        'messages': [
          {
            'role': 'system',
            'content': [
              {
                'type': 'text',
                'text':
                    '''You are an AI assistant that helps people find information.''',
              }
            ],
          },
        ],
        if (maxTokens != null) 'max_tokens': maxTokens,
        if (temperature != null) 'temperature': temperature,
        if (topP != null) 'top_p': topP,
      };
}

/// Represents a response from the OpenAI Completions API.
class CompletionsResponse {
  /// Creates a new `CompletionsResponse` instance.
  CompletionsResponse({
    required this.id,
    required this.object,
    required this.created,
    required this.choices,
    required this.usage,
  });

  /// Creates a `CompletionsResponse` from a JSON map.
  factory CompletionsResponse.fromJson(Map<String, dynamic> json) =>
      CompletionsResponse(
        id: json['id'] as String? ?? 'no-id',
        object: json['object'] as String? ?? 'no-object',
        created: json['created'] as int,
        choices: List<Choice>.from(
          (json['choices'] as List<dynamic>).map(
            (choice) => Choice.fromJson(
              choice as Map<String, dynamic>,
            ),
          ),
        ),
        usage: Usage.fromJson(json['usage'] as Map<String, dynamic>),
      );

  /// The ID of the completion.
  final String id;

  /// The object type of the response.
  final String object;

  /// The Unix timestamp of when the completion was created.
  final int created;

  /// The choices generated by the model.
  final List<Choice> choices;

  /// The usage statistics for the completion.
  final Usage usage;
}

/// Represents a choice generated by the model.
class Choice {
  /// Creates a new `Choice` instance.
  Choice({
    required this.text,
    required this.index,
    required this.logprobs,
    this.finishReason,
  });

  /// Creates a `Choice` from a JSON map.
  factory Choice.fromJson(Map<String, dynamic> json) {
    print(json);
    return Choice(
      text: (json['message'] as Map<String, dynamic>)['content'] as String? ??
          'no-text',
      index: json['index'] as int,
      logprobs: json['logprobs'],
      finishReason: json['finish_reason'] as String?,
    );
  }

  /// The text of the choice.
  final String text;

  /// The index of the choice.
  final int index;

  /// The logprobs of the choice.
  final dynamic logprobs;

  /// The reason the model stopped generating text.
  final String? finishReason;
}

/// Represents the usage statistics for a completion.
class Usage {
  /// Creates a new `Usage` instance.
  Usage({
    required this.promptTokens,
    required this.completionTokens,
    required this.totalTokens,
  });

  /// Creates a `Usage` from a JSON map.
  factory Usage.fromJson(Map<String, dynamic> json) => Usage(
        promptTokens: json['prompt_tokens'] as int,
        completionTokens: json['completion_tokens'] as int,
        totalTokens: json['total_tokens'] as int,
      );

  /// The number of tokens in the prompt.
  final int promptTokens;

  /// The number of tokens in the completion.
  final int completionTokens;

  /// The total number of tokens used.
  final int totalTokens;
}
